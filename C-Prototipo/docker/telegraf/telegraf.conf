# =========================
# Configuración Telegraf para IoT
# =========================

# Configuración global
[agent]
  interval = "10s"
  round_interval = true
  metric_batch_size = 1000
  metric_buffer_limit = 10000
  collection_jitter = "0s"
  flush_interval = "10s"
  flush_jitter = "0s"
  precision = ""
  hostname = ""
  omit_hostname = false

# Configuración de salida a InfluxDB
[[outputs.influxdb_v2]]
  urls = ["http://influxdb:8086"]
  token = "$INFLUX_TOKEN"
  organization = "iot-org"
  bucket = "iot-data"
  timeout = "5s"

# Configuración de entrada MQTT
# De momento, usamos unos ejemplos de topics de prueba
[[inputs.mqtt_consumer]]
  servers = ["tcp://mosquitto:1883"]
  topics = [
    "vittoriodurigutti/prueba",
    "vittoriodurigutti/temperature",
    "vittoriodurigutti/sensor/+",
    "vittoriodurigutti/+/+"
  ]
  data_format = "json"
  json_string_fields = ["sensor_id", "device_id"]
  json_name_key = "measurement"
  json_time_key = "timestamp"
  json_time_format = "unix"

# Configuración de entrada del sistema
[[inputs.cpu]]
  percpu = true
  totalcpu = true
  collect_cpu_time = false
  report_active = false

[[inputs.mem]]

[[inputs.disk]]
  ignore_fs = ["tmpfs", "devtmpfs", "devfs", "iso9660", "overlay", "aufs", "squashfs"]

[[inputs.diskio]]

[[inputs.net]]

[[inputs.processes]]

[[inputs.swap]]

[[inputs.system]]

# Configuración de entrada Docker
[[inputs.docker]]
  endpoint = "unix:///var/run/docker.sock"
  container_name_exclude = []
  container_name_include = []
  timeout = "5s"
  perdevice = true
  total = false

# Configuración de entrada HTTP (para health checks)
[[inputs.http]]
  urls = [
    "http://backend:3000/health",
    "http://frontend/health"
  ]
  method = "GET"
  timeout = "5s"
  data_format = "json"

# Configuración de entrada MQTT Publisher (para enviar datos de prueba)
[[inputs.mqtt_consumer]]
  servers = ["tcp://mosquitto:1883"]
  topics = ["telegraf/+/+"]
  data_format = "json"
  json_string_fields = ["host", "service"]

# Configuración de procesadores
[[processors.converter]]
  [processors.converter.tags]
    string = ["sensor_id", "device_id", "host"]

# Configuración de agregadores
[[aggregators.basicstats]]
  period = "30s"
  drop_original = false
  stats = ["mean", "min", "max", "sum", "count"]
