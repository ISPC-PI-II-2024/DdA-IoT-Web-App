version: '3.9'

services:
  # -----------------------------
  # PORTAINER (GestiÃ³n de contenedores)
  # -----------------------------
  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    restart: unless-stopped
    ports:
      - "9000:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./portainer/data:/data
    networks:
      - silo-network

  # -----------------------------
  # NGINX PROXY MANAGER
  # -----------------------------
  nginx-proxy-manager:
    image: jc21/nginx-proxy-manager:latest
    container_name: nginx-proxy-manager
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "81:81"
    environment:
      DB_SQLITE_FILE: "/data/database.sqlite"
      DISABLE_IPV6: "false"
    volumes:
      - ./nginx-proxy-manager/data:/data
      - ./nginx-proxy-manager/letsencrypt:/etc/letsencrypt
    networks:
      - silo-network
    depends_on:
      - portainer

  # -----------------------------
  # CLOUDFLARED TUNNEL
  # -----------------------------
#  cloudflared:
#    image: cloudflare/cloudflared:latest
#    container_name: cloudflared
#    restart: unless-stopped
#    command: tunnel --config /etc/cloudflared/config.yml run
#    volumes:
#      - ./cloudflared/config.yml:/etc/cloudflared/config.yml
#    networks:
#      - silo-network
#    depends_on:
#      - nginx-proxy-manager

  cloudflared:
    image: cloudflare/cloudflared:latest
    container_name: cloudflared
    restart: unless-stopped
    command: tunnel --no-autoupdate run  --token eyJhIjoiYzk3ZDU0ZjhiNzQyNWUwM2VkM2YzODk3YjlmNGJlODIiLCJ0IjoiZmVjMTIzNmQtYTJkOS00MTU5LTgzOWYtMDE5MDk2MjI5OTFk>    # environment:
    #  - TUNNEL_TOKEN=${CLOUDFLARE_TUNNEL_TOKEN}
    networks:
      - silo-network

  # -----------------------------
  # SILO SERVICES
  # -----------------------------

  # MariaDB
  mariadb:
    image: mariadb:latest
    container_name: silo-mariadb
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    volumes:
      - ./services/silo/mariadb/data:/var/lib/mysql
    networks:
      - silo-network

  # InfluxDB
  influxdb:
    image: influxdb:1.8
    container_name: silo-influxdb
    restart: unless-stopped
    environment:
      - INFLUXDB_DB=${INFLUXDB_DB}
      - INFLUXDB_ADMIN_USER=${INFLUXDB_ADMIN_USER}
      - INFLUXDB_ADMIN_PASSWORD=${INFLUXDB_ADMIN_PASSWORD}
    volumes:
      - ./services/silo/influxdb/data:/var/lib/influxdb
    networks:
      - silo-network

  # Telegraf
  telegraf:
    image: telegraf:latest
    container_name: silo-telegraf
    restart: unless-stopped
    volumes:
      - ./services/silo/telegraf/config/telegraf.conf:/etc/telegraf/telegraf.conf:ro
    networks:
      - silo-network
    depends_on:
      - influxdb
      - mosquitto

  # Mosquitto MQTT
  mosquitto:
    image: eclipse-mosquitto:2
    container_name: silo-mosquitto
    restart: unless-stopped
    ports:
      - "1883:1883"  # MQTT
      - "9001:9001"  # WebSocket
    volumes:
      - ./services/silo/mosquitto/config:/mosquitto/config
      - ./services/silo/mosquitto/data:/mosquitto/data
      - ./services/silo/mosquitto/log:/mosquitto/log
    networks:
      - silo-network

  # Node-RED
  nodered:
    image: nodered/node-red:latest
    container_name: silo-nodered
    restart: unless-stopped
    ports:
      - "1880:1880"
    volumes:
      - ./services/silo/nodered/data:/data
    environment:
      - NODE_RED_ENABLE_PROJECTS=true
    networks:
      - silo-network
    depends_on:
      - mosquitto
      - influxdb

  # Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: silo-grafana
    restart: unless-stopped
    volumes:
      - ./services/silo/grafana/data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    networks:
      - silo-network
    depends_on:
      - influxdb

  # Adminer
  adminer:
    image: adminer
    container_name: silo-adminer
    restart: unless-stopped
    networks:
      - silo-network
    depends_on:
      - mariadb
      - influxdb

  # App IoT - Backend
  iot-backend:
    build:
      #context: https://github.com/ISPC-PI-II-2024/DdA-IoT-Web-App.git
      context: ./services/iot-app/repo/C-Prototipo
      #dockerfile: C-Prototipo/backend/Dockerfile
      dockerfile: docker/backend.Dockerfile
      args:
        - NODE_ENV=production
    container_name: iot-backend
    restart: unless-stopped
    ports:
      - "3000:3000"  # Solo para desarrollo, luego lo quitamos
    environment:
      - NODE_ENV=production
      - PORT=3000
      - JWT_SECRET=${JWT_SECRET}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - MYSQL_HOST=silo-mariadb
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MQTT_BROKER_HOST=silo-mosquitto
      - MQTT_BROKER_PORT=1883
      - MQTT_TOPICS=${MQTT_TOPICS}
      - ADMIN_WHITELIST=${ADMIN_WHITELIST}
      - ACTION_WHITELIST=${ACTION_WHITELIST}
    networks:
      - silo-network
    depends_on:
      - mariadb
      - mosquitto
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # App IoT - Frontend
  iot-frontend:
    build:
      context: ./services/iot-app/repo/C-Prototipo
      dockerfile: docker/frontend.Dockerfile
    container_name: iot-frontend
    restart: unless-stopped
    ports:
      - "5000:80"
    networks:
      - silo-network
    depends_on:
      - iot-backend

networks:
  silo-network:
    driver: bridge