# ==========================
# Docker Compose para Producción
# Configuración optimizada para servidor privado con subdominio
# ==========================

version: '3.8'

services:
  # ==========================
  # BACKEND - Node.js + Express + WebSocket + MQTT
  # ==========================
  backend:
    build:
      context: .
      dockerfile: backend.Dockerfile
    container_name: iot-backend-prod
    restart: unless-stopped
    
    # Variables de entorno para producción
    environment:
      # Configuración básica
      - NODE_ENV=production
      - PORT=4000
      
      # JWT Configuration (CAMBIAR EN PRODUCCIÓN)
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=15m
      - REFRESH_EXPIRES_IN=7d
      
      # Google Identity Services
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      
      # CORS Configuration (DOMINIO ESPECÍFICO)
      - CORS_ORIGIN=${CORS_ORIGIN}
      
      # MQTT Configuration
      - MQTT_BROKER_HOST=${MQTT_BROKER_HOST}
      - MQTT_BROKER_PORT=${MQTT_BROKER_PORT}
      - MQTT_BROKER_USERNAME=${MQTT_BROKER_USERNAME}
      - MQTT_BROKER_PASSWORD=${MQTT_BROKER_PASSWORD}
      - MQTT_TOPICS=${MQTT_TOPICS}
      
      # Listas blancas para roles
      - ADMIN_WHITELIST=${ADMIN_WHITELIST}
      - ACTION_WHITELIST=${ACTION_WHITELIST}
    
    # Puertos (solo interno, no exponer directamente)
    expose:
      - "4000"
    
    # Health check
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:4000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    # Red
    networks:
      - iot-network
    
    # Logs con rotación
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
    
    # Límites de recursos
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # ==========================
  # FRONTEND - Nginx + Archivos Estáticos
  # ==========================
  frontend:
    build:
      context: .
      dockerfile: frontend.Dockerfile
    container_name: iot-frontend-prod
    restart: unless-stopped
    
    # Puertos (solo interno, usar reverse proxy)
    expose:
      - "80"
    
    # Health check
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    
    # Dependencias
    depends_on:
      backend:
        condition: service_healthy
    
    # Red
    networks:
      - iot-network
    
    # Logs con rotación
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
    
    # Límites de recursos
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'


# ==========================
# REDES
# ==========================
networks:
  iot-network:
    driver: bridge
    name: iot-network


# ==========================
# VOLÚMENES
# ==========================
volumes:
  # Para logs persistentes
  backend-logs:
    driver: local
  frontend-logs:
    driver: local

# ==========================
# CONFIGURACIÓN PARA PRODUCCIÓN
# ==========================

# INSTRUCCIONES PARA DESPLIEGUE EN PRODUCCIÓN:
#
# 1. CONFIGURACIÓN DEL SERVIDOR:
#    - Instalar Docker y Docker Compose
#    - Configurar firewall (solo puertos 80, 443, 22)
#    - Configurar SSL/TLS con Let's Encrypt
#
# 2. CONFIGURACIÓN DEL DOMINIO:
#    - Crear subdominio: iot.tudominio.com
#    - Configurar DNS: iot.tudominio.com -> IP_DEL_SERVIDOR
#    - Configurar reverse proxy (Nginx Proxy Manager, Traefik)
#
# 3. VARIABLES DE ENTORNO (.env):
#    NODE_ENV=production
#    JWT_SECRET=a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6
#    GOOGLE_CLIENT_ID=123456789-abcdefghijklmnop.apps.googleusercontent.com
#    CORS_ORIGIN=https://iot.tudominio.com
#    MQTT_BROKER_HOST=mqtt.tudominio.com
#    MQTT_BROKER_PORT=8883
#    MQTT_BROKER_USERNAME=mqtt_user
#    MQTT_BROKER_PASSWORD=secure_mqtt_password
#    ADMIN_WHITELIST=admin@tudominio.com,superadmin@tudominio.com
#    ACTION_WHITELIST=operador@tudominio.com,tecnico@tudominio.com
#
# 4. CONFIGURACIÓN DEL REVERSE PROXY:
#    - Configurar Nginx Proxy Manager o Traefik
#    - Crear proxy host: iot.tudominio.com -> frontend:80
#    - Configurar SSL con Let's Encrypt
#    - Configurar WebSocket support
#
# 5. CONFIGURACIÓN DE MQTT:
#    - Configurar broker MQTT externo
#    - Configurar autenticación MQTT
#    - Configurar SSL/TLS para MQTT
#
# 6. MONITOREO Y LOGS:
#    - Configurar logs centralizados
#    - Configurar métricas y alertas
#    - Configurar backup automático
#
# 7. SEGURIDAD:
#    - Usar secrets de Docker para datos sensibles
#    - Configurar rate limiting
#    - Configurar WAF (Web Application Firewall)
#    - Configurar backup de datos
#
# 8. INTEGRACIÓN CON OTRO DOCKER COMPOSE:
#    - Usar networks externas para comunicación
#    - Configurar dependencias entre servicios
#    - Compartir volúmenes si es necesario
#
# EJEMPLO DE INTEGRACIÓN:
# networks:
#   iot-network:
#     external: true
#     name: main-network
#
# services:
#   backend:
#     networks:
#       - iot-network
#       - main-network
#   frontend:
#     networks:
#       - iot-network
#       - main-network
#
# 9. COMANDOS DE DESPLIEGUE:
#    # Construir imágenes
#    docker-compose -f docker-compose.prod.yml build
#
#    # Levantar servicios
#    docker-compose -f docker-compose.prod.yml up -d
#
#    # Ver logs
#    docker-compose -f docker-compose.prod.yml logs -f
#
#    # Verificar estado
#    docker-compose -f docker-compose.prod.yml ps
#
#    # Actualizar servicios
#    docker-compose -f docker-compose.prod.yml pull
#    docker-compose -f docker-compose.prod.yml up -d
#
#    # Detener servicios
#    docker-compose -f docker-compose.prod.yml down
#
# 10. BACKUP Y RECUPERACIÓN:
#     # Backup de configuración
#     tar -czf backup-$(date +%Y%m%d).tar.gz .env docker-compose.prod.yml
#
#     # Backup de logs
#     docker-compose -f docker-compose.prod.yml logs > logs-$(date +%Y%m%d).log
#
#     # Backup de volúmenes
#     docker run --rm -v iot-backend-logs:/data -v $(pwd):/backup alpine tar czf /backup/backend-logs-$(date +%Y%m%d).tar.gz -C /data .
#     docker run --rm -v iot-frontend-logs:/data -v $(pwd):/backup alpine tar czf /backup/frontend-logs-$(date +%Y%m%d).tar.gz -C /data .
#
# ==========================
